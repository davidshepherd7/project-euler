/* Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/ 

// brute force solution, but still v. fast on modern computers


#include <iostream>
using namespace std;

int main()
{

  unsigned int total = 0;
  unsigned int fib = 1;
  unsigned int fib_new;
  unsigned int fib_m1 = 1;

  unsigned int i=1;
  // ?? use a while loop where the next calculation happens half way through the loop, not sure if this is good practice or not
  while(fib<=4E6)
    {
      if(fib%2==0) total += fib; // if odd then add to total
      //cout << fib << "\t" << total << endl; // debugging output

      fib_new = fib + fib_m1; // calculate new fibonacci number

      fib_m1 = fib; // assign new values for precursors 
//?? probabaly better way, pointers?
      fib = fib_new;
      i++;
    }

  cout << total << endl;


}
